Alice 和 Bob 用几堆石子在做游戏。几堆石子排成一行，每堆石子都对应一个得分，由数组 stoneValue 给出。

Alice 和 Bob 轮流取石子，Alice 总是先开始。在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 1、2 或 3 堆石子 。比赛一直持续到所有石头都被拿走。

每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。每个玩家的初始分数都是 0 。比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。

假设 Alice 和 Bob 都采取 最优策略 。如果 Alice 赢了就返回 "Alice" ，Bob 赢了就返回 "Bob"，平局（分数相同）返回 "Tie" 。

 

示例 1：

输入：values = [1,2,3,7]
输出："Bob"
解释：Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。但是 Bob 的得分为 7，Bob 获胜。

示例 2：

输入：values = [1,2,3,-9]
输出："Alice"
解释：Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。
如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。
如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。
注意，他们都应该采取 最优策略 ，所以在这里 Alice 将选择能够使她获胜的方案。

示例 3：

输入：values = [1,2,3,6]
输出："Tie"
解释：Alice 无法赢得比赛。如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。


此题仍然是博弈，与之前的不同之处在于这里要考虑3种情况，分别是选1堆，选2堆和选3堆的情况，这里采用变量bestj，并对它采用DP,状态转移方程bestj = min(bestj, dp[j])
一维数组dp[i]表示剩余[i:stoneValue.length]时，取得的最大石子数，显然状态转移方程式dp[i] = sum[i,length] - bestj

题解：
class Solution {
    public String stoneGameIII(int[] stoneValue) {
        int n = stoneValue.length;
        int[] sumup = new int[n];
        sumup[n-1] = stoneValue[n-1];
        for(int i=n-2;i>=0;i--){
            sumup[i] = sumup[i+1] + stoneValue[i];
        }

        int[] dp = new int[n+1]; dp[n] = 0;
        for(int i=n-1;i>=0;i--){
            int bestj = dp[i+1];                //初始状态bestj是石碓剩余[i+1:n]时，当前玩家能取到的最大石子数
            for(int j=i+2;j<=i+3&&j<=n;j++){
                bestj = Math.min(bestj,dp[j]);  //bestj的dp,选取当前玩家拿走第1,2,3堆石子中的最好情况
            }
            dp[i] = sumup[i] - bestj;
        }

        int total = 0;
        for(int k:stoneValue){
            total += k;
        }
        if(dp[0]*2 == total){
            return "Tie";
        }
        else
            return dp[0]*2>total?"Alice":"Bob";
    }
}
