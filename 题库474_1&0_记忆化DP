在计算机界中，我们总是追求用有限的资源获取最大的收益。

现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。

你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。

注意:

    给定 0 和 1 的数量都不会超过 100。
    给定字符串数组的长度不会超过 600。

示例 1:

输入: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3
输出: 4

解释: 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 "10","0001","1","0" 。

示例 2:

输入: Array = {"10", "0", "1"}, m = 1, n = 1
输出: 2

解释: 你可以拼出 "10"，但之后就没有剩余数字了。更好的选择是拼出 "0" 和 "1" 。



这道题用的是记忆化的DP思想，还是老办法，遍历每一个字符串，如果当前字符串加入可行队列后有最佳状态买就更新dp[zeros][ones],dp[zeros][ones]表示有zeros个0，ones情况下能表示的最大字符串数
状态转移方程：dp[zeros][ones] = max(1+dp[zeros-count[0]][ones-count[1]],dp[zeros][ones])

题解：
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int[][] dp = new int[m+1][n+1];
        for(String S:strs){                                                                     //每到一个字符串，就更新dp
            int[] count = countzerosones(S);
            for(int zeros=m;zeros>=count[0];zeros--){
                for(int ones=n;ones>=count[1];ones--){
                    dp[zeros][ones] = Math.max(1+dp[zeros-count[0]][ones-count[1]],dp[zeros][ones]);
                }
            }
        }
        return dp[m][n];
    }
    public int[] countzerosones(String s){
        int[] c = new int[2];
        for(int i=0;i<s.length();++i){
            c[s.charAt(i) - '0']++;
        }
        return c;
    }
}
