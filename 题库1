给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

 

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

题解：
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        # cp = []
        # for i in range(len(nums)):
        #     for j  in range(i+1,len(nums)):
        #         if nums[j]==target-nums[i]:
        #             cp.append(i)
        #             cp.append(j)
        # return cp


        hashmap={}
        for ind,num in enumerate(nums):
            hashmap[num] = ind
        for i,num in enumerate(nums):
            j = hashmap.get(target - num)
            if j is not None and i!=j:
                return [i,j]
                
                
                
                #注释部分使用暴力法，非注释部分用的是字典的方法，省去了暴力法中寻找target-nums[i]的部分
