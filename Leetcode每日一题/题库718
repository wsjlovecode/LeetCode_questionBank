给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。

示例 1:

输入:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
输出: 3
解释: 
长度最长的公共子数组是 [3, 2, 1]。


题解：
//动态规划的方法，比较容易想到
class Solution:
    def findLength(self, A: List[int], B: List[int]) -> int:
        la = len(A)
        lb = len(B)
        dp = [[0 for _ in range(lb+1)] for _ in range(la+1)]
        for i in range(1,la+1):
            for j in range(1,lb+1):
                if A[i-1]==B[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1;
                    
        return max(max(row) for row in dp)
        
        
        
 //还有一种滑动窗口的方法
 class Solution:
    def findLength(self, A: List[int], B: List[int]) -> int:
        def maxLength(addA: int, addB: int, length: int) -> int:
            ret = k = 0
            for i in range(length):
                if A[addA + i] == B[addB + i]:
                    k += 1
                    ret = max(ret, k)
                else:
                    k = 0
            return ret
        
        n, m = len(A), len(B)
        ret = 0
        for i in range(n):
            length = min(m, n - i)
            ret = max(ret, maxLength(i, 0, length))
        for i in range(m):
            length = min(n, m - i)
            ret = max(ret, maxLength(0, i, length))
        return ret

