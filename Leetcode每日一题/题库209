给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组，并返回其长度。如果不存在符合条件的连续子数组，返回 0。

 

示例：

输入：s = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的连续子数组。

题解：
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int minN=Integer.MAX_VALUE;
        int sum=0;
        int i=0; int j=0;
        while(i<=nums.length-1){
            if(sum<s && j!=nums.length){
                sum += nums[j];
                j++;
            }
            else{
                if(sum>=s && j-i<minN){
                    minN = j-i;
                }
                sum -= nums[i];
                i++;
            }
        }
        if(minN==Integer.MAX_VALUE)
            return 0;
        else
            return minN;
    }
}                                                                                             //用的是双指针滑动窗口的解法，一般遇到连续子数组有两种方法，另外一种是用动态规划的办法
