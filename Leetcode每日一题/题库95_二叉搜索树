给定一个整数 n，生成所有由 1 ... n 为节点所组成的 二叉搜索树 。

 

示例：

输入：3
输出：
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释：
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3



此题也是递归建立二叉搜索树，这里要求返回数结构
题解：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n==0){
            return new LinkedList<TreeNode>();
        }
        return generateTrees(1,n);
    }

    public List<TreeNode> generateTrees(int start, int end){
        List<TreeNode> all_trees = new LinkedList<TreeNode>();
        if(start>end){
            all_trees.add(null);
            return all_trees;
        }
        for(int i=start;i<=end;i++){
            List<TreeNode> LeftSubTree = generateTrees(start,i-1);                  
            List<TreeNode> RightSubTree = generateTrees(i+1,end);
            for(TreeNode Left: LeftSubTree){                                                        //注意61、62行的写法，这样可以从已经建立好的左子树和右子树中选择其中一个作为根节点的左右子树
                for(TreeNode Right:RightSubTree){
                    TreeNode cur_n = new TreeNode(i);
                    cur_n.left = Left;
                    cur_n.right = Right;
                    all_trees.add(cur_n);
                }
            }
        }
        return all_trees;
    }
}
