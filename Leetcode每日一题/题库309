给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

    你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
    卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。

示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

题解：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty()){
            return 0;
        }

        int s0 = -prices[0];
        int s1 = 0;
        int s2 = 0;
        for(int i=0;i<prices.size();++i){
            int new0 = max(s0,s2-prices[i]);
            int new1 = s0 + prices[i];
            int new2 = max(s1,s2);
            s0 = new0;
            s1 = new1;
            s2 = new2;
        }
        return max(s1,s2);
    }
};

//这道题使用了状态机的思路，而且使用了三个变量来维护不同的状态，这一点确实我没想到
