在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:

输入: [3,2,1,5,6,4] 和 k = 2
输出: 5

示例 2:

输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4


排序题
本题用到的是快速排序的知识，因为每一次快排都会确定一个元素的最终位置，所以我们可以在每一次排序后判断所在的元素在“轴”的哪一边即可，递归的调用
本题还可以使用堆排序


题解：
class Solution {
    Random random = new Random();    

    public int findKthLargest(int[] nums, int k) {
        return quickSelect(nums,0,nums.length-1,nums.length-k);
    }

    public void swap(int[] a, int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }

    public int partition(int[] a, int l, int r){
        int x=a[r];
        int i=l-1;
        for(int j=l;j<r;++j){
            if(a[j]<=x){
                swap(a,++i,j);
            }
        }
        swap(a,i+1,r);
        return i+1;
    }

    public int randomPatition(int[] a, int l, int r){
        int i = random.nextInt(r - l + 1) + l;
        swap(a, i, r);
        return partition(a, l, r);
    }

    public int quickSelect(int[] a, int l, int r, int index){
        int q=randomPatition(a,l,r);
        if(q==index){
            return a[q];
        }
        else{
            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);
        }
    }
}
