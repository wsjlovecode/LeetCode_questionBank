给定一个包含 非负数 的数组和一个目标 整数 k，编写一个函数来判断该数组是否含有连续的子数组，其大小至少为 2，且总和为 k 的倍数，即总和为 n*k，其中 n 也是一个整数。

 

示例 1：

输入：[23,2,4,6,7], k = 6
输出：True
解释：[2,4] 是一个大小为 2 的子数组，并且和为 6。

示例 2：

输入：[23,2,6,4,7], k = 6
输出：True
解释：[23,2,6,4,7]是大小为 5 的子数组，并且和为 42。

 

说明：

    数组的长度不会超过 10,000 。
    你可以认为所有数字总和在 32 位有符号整数范围内。


注释是我的方法，用的是处理连续子数组的方法，但是在处理边界问题上还是没有下面的方法用的好

题解：
# class Solution:
#     def checkSubarraySum(self, nums: List[int], k: int) -> bool:
#         sums = [0]*len(nums)
#         flag = False
#         if k==0: return False
#         sums[0] = nums[0]
#         for i in range(1,len(nums)):
#             sums[i] = sums[i-1]+nums[i]
#             for j in range(i):
#                 if (sums[i]-sums[j])%k==0:
#                     flag = True;
#                     break
        
#         return flag

class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        if len(nums) < 2:
            return False
        dp = [0] * len(nums)
        dp[0] = nums[0]
        for i in range(1,len(nums)):
            dp[i] = dp[i-1] + nums[i] #获取nums的0-i的和，包括i
        for i in range(len(nums)-1):
            for j in range(i+1,len(nums)):
                sums = dp[j] - dp[i] + nums[i] #得到sums[i:j]的大小，这里包括j
                if k == 0:
                    if sums == 0:
                        return True
                else:
                    if sums % k == 0:
                        return True
        return False
