给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。

示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。

说明: 你可以假设 n 不小于 2 且不大于 58。


题解：

#(这道题真的是dp吗？这是数学题吧) 有用的推论：1. 尽量拆分成相等的数可使乘积最大，根据：基本不等式  2.乘积最大的数应该是在e附近，也就是2或3，推导过程可见LeetCode题解

class Solution:
    def integerBreak(self, n: int) -> int:
        if n<=3:
            return n-1;
        else:
            a,b = n//3,n%3
            if b==0: return int(math.pow(3,a))
            if b==1: return int(math.pow(3,a-1)*4)
            if b==2: return int(math.pow(3,a)*2)


增加Java version：
class Solution {
    public int integerBreak(int n) {
        if(n<=3){
            return n-1;
        }
        else{
            int a = n/3;
            int b = n%3;
            if(b==0) return (int)(Math.pow(3,a));
            if(b==1) return (int)(Math.pow(3,a-1)*4);
            return (int)(Math.pow(3,a)*2);
            }
        }
}
