给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

示例 2:

输入: [3,2,6,5,0,3], k = 2
输出: 7
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。


这道题是所有股票问题的推广，解决股票问题的思想是状态机的思想，推广开来可以用dp[i][j][0]:表示第i天，第j次不拥有股票时的最大利润，dp[i][j][1]:表示第i天，第j天拥有股票时的最大利润
题解：
class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int max_k = k;
        if (max_k > n / 2) 
            return maxProfit_k_inf(prices);

        int[][][] dp = new int[n][max_k + 1][2];
        for (int i = 0; i < n; i++) 
            for (int j = max_k; j >= 1; j--) {
                if (i - 1 == -1) { 
                    dp[i][j][0] = 0;
                    dp[i][j][1] = -prices[i];
                }
                else{
                    dp[i][j][0] = Math.max(dp[i-1][j][0], dp[i-1][j][1] + prices[i]);
                    dp[i][j][1] = Math.max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i]); 
                }    
            }
        return dp[n - 1][max_k][0];

    }

    public int maxProfit_k_inf(int[] prices) {
        int n = prices.length;
        int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int temp = dp_i_0;
            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = Math.max(dp_i_1, temp - prices[i]);
        }
        return dp_i_0;
    }


}

提供Python版的，但是代码不可执行，以后可以修改，思想是对的：
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        state0 = [0] * k
        state1 = [Integer.MIN_VALUE] * k
        for i in range(len(prices)):
            state1[0] = max(state1[0],-prices[i])
            for j in range(1,k):
                state0[j] = max(state0[j],state1[j-1]+prices[i])
                state1[j] = max(state1[j],state0[j-1]-prices[i])
        return max(state0[s] for s in range(k))
