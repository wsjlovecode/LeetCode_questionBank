给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。

你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

返回获得利润的最大值。

注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

示例 1:

输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
输出: 8
解释: 能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.




这道题需要用两个变量维护两个状态，一个是当前拥有股票的利润，另一个是不拥有股票的利润

题解：

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        state1 = -prices[0]
        state0 = 0
        for i in range(1,len(prices)):
            new_state0 = max(state1 + prices[i] - fee, state0)
            new_state1 = max(state0 - prices[i], state1)
            state0 = new_state0
            state1 = new_state1
        
        return max(state0,state1)