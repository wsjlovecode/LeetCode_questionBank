给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


树、二叉树很多问题的求解会用到递归以及动态规划，这道题就是遍历每个点，并使其成为根节点，左右两边分别为左子树，右子树分别递归建立树，当然这里只要求个数，所以不必建立树，也就不需递归操作，直接建立
状态转移方程

题解：
class Solution {
    public int numTrees(int n) {
        // int[] dp = new int[n];
        // if(n==1) return 1;
        // int sum = 0;
        // dp[0] = 1;
        // for(int i=1;i<n;++i){
        //     dp[i] = 2*dp[i-1] + sum;
        //     sum++;
        // }
        // return dp[n-1];

        int[] dp = new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;++i){
            for(int j=1;j<=i;++j){
                dp[i] += dp[j-1]*dp[i-j];
            }
        }
        return dp[n];
    }
}
