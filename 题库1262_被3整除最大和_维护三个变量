给你一个整数数组 nums，请你找出并返回能被三整除的元素最大和。

 

示例 1：

输入：nums = [3,6,5,1,8]
输出：18
解释：选出数字 3, 6, 1 和 8，它们的和是 18（可被 3 整除的最大和）。

示例 2：

输入：nums = [4]
输出：0
解释：4 不能被 3 整除，所以无法选出数字，返回 0。

示例 3：

输入：nums = [1,2,3,4,4]
输出：12
解释：选出数字 1, 3, 4 以及 4，它们的和是 12（可被 3 整除的最大和）。

 
这道题使用了三个变量来维护 3n，3n+1,3n+2的值，遍历数组，每次更新这三个变量。最后返回3n变量的值
题解：
class Solution:
    def maxSumDivThree(self, nums: List[int]) -> int:
        dp = [0,0,0]
        for i in range(len(nums)):
            mod = nums[i] % 3
            a = dp[(3 + 0 - mod)%3]
            b = dp[(3 + 1 - mod)%3]
            c = dp[(3 + 2 - mod)%3]
            if a!=0 or mod == 0: dp[0] = max(dp[0],a + nums[i])
            if b!=0 or mod == 1: dp[1] = max(dp[1],b + nums[i])
            if c!=0 or mod == 2: dp[2] = max(dp[2],c + nums[i])
        
        return dp[0]
