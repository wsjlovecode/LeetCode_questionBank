给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。

具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

 

示例 1：

输入："abc"
输出：3
解释：三个回文子串: "a", "b", "c"

示例 2：

输入："aaa"
输出：6
解释：6个回文子串: "a", "a", "a", "aa", "aa", "aaa"

 

提示：

    输入的字符串长度不会超过 1000 。


这道题用到了中心扩散的方法，其实也是暴力法的一种优化，这里用到了一个思想，就是找到轴心，由于数组可能长度为偶数，所以轴心可能有两个，用l=i//2表示左轴心，r=i//2+i%2表示右轴心，可以将奇数和偶数的
情况统一起来，确定轴心后，就是用两个指针从轴心扩散，寻找回文子串。

题解：
class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        ans = 0
        for i in range(2*n-1):
            l = i//2
            r = i//2 + i%2
            while l>=0 and r<n and s[l]==s[r]:
                l = l-1
                r = r+1
                ans = ans + 1
        
        return ans
        
java版：
class Solution {
    public int countSubstrings(String s) {
        int n = s.length(), ans = 0;
        for (int i = 0; i < 2 * n - 1; ++i) {
            int l = i / 2, r = i / 2 + i % 2;
            while (l >= 0 && r < n && s.charAt(l) == s.charAt(r)) {
                --l;
                ++r;
                ++ans;
            }
        }
        return ans;
    }
}


附上DP版，dp的思想就是二维数组的思想，dp[i][j]表示i-j之间最多的回文子串，如果i位置的字符和j位置的相同，且i-1-j+1的位置是回文子串，那么i-j也是回文子串，这就想到了DP
count = 0
        dp = [[0]*len(s) for _ in range(len(s))]
        for j in range(len(s)):
            for i in range(j+1):
                if i == j:
                    dp[i][j]=1
                    count += 1
                elif j-i==1 and s[i]==s[j]:
                    dp[i][j]=1
                    count += 1 
                elif j-i>1 and s[i]==s[j] and dp[i+1][j-1]:
                    dp[i][j] = 1
                    count += 1
        return count
