给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。

返回可以使最终数组和为目标数 S 的所有添加符号的方法数。

 

示例：

输入：nums: [1, 1, 1, 1, 1], S: 3
输出：5
解释：

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

一共有5种方法让最终目标和为3。

 

提示：

    数组非空，且长度不会超过 20 。
    初始的数组的和不会超过 1000 。
    保证返回的最终结果能被 32 位整数存下。



这道题可以转化为背包问题的DP，设所有符号为正的数总和设为一个背包的容量，容量为x，所有符号为负的数总和设为一个背包，记为y，可知x+y=sum,x-y=S,所以x=(sum+S)/2, dp[i]表示目标数在i的情况下
最多的可能情况
题解：
class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        sumup = 0
        for i in range(len(nums)):
            sumup += nums[i]
        
        if (sumup+S)%2==1:
            return 0
        if S>sumup:
            return 0

        length = (sumup+S)>>1
        dp = [0]*(length+1)
        dp[0] = 1
        for num in nums:
            for j in range(length,num-1,-1):
                dp[j] += dp[j-num]
        
        return dp[length]
