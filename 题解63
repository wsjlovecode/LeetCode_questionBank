一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？

网格中的障碍物和空位置分别用 1 和 0 来表示。

说明：m 和 n 的值均不超过 100。

示例 1:

输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右


题解：
//此题就是dp当中比较常见的题

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int r = obstacleGrid.length;
        int v = obstacleGrid[0].length;
        int[][] map = new int[r][v];
        for(int i=0;i<r;++i){
            for(int j=0;j<v;++j){
                if(obstacleGrid[i][j]==1) continue;
                if(i==0 && j==0){
                    map[i][j]=1;
                    continue;
                }
                if(i==0){
                    map[i][j]=map[i][j-1];
                }
                else if(j==0){
                    map[i][j]=map[i-1][j];
                }
                else{
                    map[i][j]=map[i-1][j]+map[i][j-1];              //当前方格可以由上方方格往下得到，也可以从左边方格右移得
                }                                                   //到
            }
        }
        return map[r-1][v-1];
    }
}
